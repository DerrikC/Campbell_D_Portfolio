'use strict';

/* jshint mocha: true */

var expressed = require('../lib');
var supertest = require('supertest');
var assert = require('assert');
var B = require('bluebird');
var Router = require('express/lib/router');
var query = require('express/lib/middleware/query');
var middleware = require('express/lib/middleware/init');

var request = function request(app) {
	return supertest(app.internal);
};

// jscs:disable
var app;
var server;
// jscs:enable

// I want to clear all state between each test.
var initApp = function initApp(done) {
	var init = function init() {
		app = expressed();
		server = app.listen(9001);
		done();
	};

	if (server) {
		server.close(init);
	} else {
		init();
	}
};
describe('expressed', function () {

	describe('basic handling', function () {
		beforeEach(initApp);

		it('should return simple values', function () {
			app.get('/', function () {
				return 'foobar';
			});

			return request(app).get('/').expect(200);
		});

		it('should return simple async values', function () {
			app.get('/', function () {
				return B.resolve({
					name: 'foobar'
				});
			});
			return request(app).get('/').expect(200).expect(function (res) {
				assert.equal(res.body.name, 'foobar');
			});
		});

		it('passes errors to error handlers', function () {
			app.get('/', function () {
				return B.reject(new Error('oh noes'));
			});

			app.use(function (err, req, res, next) {
				res.status(500).send({ message: 'tsk tsk' });
			});

			return request(app).get('/').expect(500).expect(function (res) {
				assert.equal(res.body.message, 'tsk tsk');
			});
		});
	});

	describe('complex handling', function () {
		beforeEach(initApp);

		var returnsRejected = function returnsRejected() {
			return B.reject(new Error('Foobar'));
		};
		var errorHandler = function errorHandler(app) {
			app.use(function (err, req, res, next) {
				res.status(500).send({ message: 'err' });
			});
		};

		it('allows middle handlers', function () {
			app.get('/', returnsRejected, function (req, res) {
				return 'yep';
			});
			errorHandler(app);
			return request(app).get('/').expect(500);
		});

		it('allows array middle handlers', function () {
			var fn1 = function fn1(req, res, next) {
				res.foo1 = 1;
				next();
			};
			var fn2 = function fn2(req, res, next) {
				res.foo2 = 2;
				next();
			};

			app.get('/', [fn1, fn2], function (req, res) {
				return {
					foo1: res.foo1,
					foo2: res.foo2
				};
			});
			errorHandler(app);

			return request(app).get('/').expect(200).expect(function (res) {
				assert.equal(res.body.foo2, 2);
			});
		});
	});
});
//# sourceMappingURL=data:application/json;base64,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QUFjO0FBQ3RDLFdBQU87QUFDTixXQUFNLElBQUksSUFBSjtBQUNOLFdBQU0sSUFBSSxJQUFKO0tBRlAsQ0FEc0M7SUFBZCxDQUF6QixDQVZ3QztBQWdCeEMsZ0JBQWEsR0FBYixFQWhCd0M7O0FBa0J4QyxVQUFPLFFBQVEsR0FBUixFQUNMLEdBREssQ0FDRCxHQURDLEVBRUwsTUFGSyxDQUVFLEdBRkYsRUFHTCxNQUhLLENBR0UsVUFBQyxHQUFELEVBQVM7QUFDaEIsV0FBTyxLQUFQLENBQWEsSUFBSSxJQUFKLENBQVMsSUFBVCxFQUFlLENBQTVCLEVBRGdCO0lBQVQsQ0FIVCxDQWxCd0M7R0FBTixDQUFuQyxDQXRCa0M7RUFBTixDQUE3QixDQWpEMkI7Q0FBTixDQUF0QiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoganNoaW50IG1vY2hhOiB0cnVlICovXG5cbmNvbnN0IGV4cHJlc3NlZCA9IHJlcXVpcmUoJy4uL2xpYicpO1xuY29uc3Qgc3VwZXJ0ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IEIgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnZXhwcmVzcy9saWIvcm91dGVyJyk7XG5jb25zdCBxdWVyeSA9IHJlcXVpcmUoJ2V4cHJlc3MvbGliL21pZGRsZXdhcmUvcXVlcnknKTtcbmNvbnN0IG1pZGRsZXdhcmUgPSByZXF1aXJlKCdleHByZXNzL2xpYi9taWRkbGV3YXJlL2luaXQnKTtcblxuY29uc3QgcmVxdWVzdCA9IChhcHApID0+IHtcblx0cmV0dXJuIHN1cGVydGVzdChhcHAuaW50ZXJuYWwpO1xufTtcblxuLy8ganNjczpkaXNhYmxlXG52YXIgYXBwO1xudmFyIHNlcnZlcjtcbi8vIGpzY3M6ZW5hYmxlXG5cbi8vIEkgd2FudCB0byBjbGVhciBhbGwgc3RhdGUgYmV0d2VlbiBlYWNoIHRlc3QuXG5jb25zdCBpbml0QXBwID0gKGRvbmUpID0+IHtcblx0Y29uc3QgaW5pdCA9ICgpID0+IHtcblx0XHRhcHAgPSBleHByZXNzZWQoKTtcblx0XHRzZXJ2ZXIgPSBhcHAubGlzdGVuKDkwMDEpO1xuXHRcdGRvbmUoKTtcblx0fTtcblxuXHRpZihzZXJ2ZXIpIHtcblx0XHRzZXJ2ZXIuY2xvc2UoaW5pdCk7XG5cdH0gZWxzZSB7XG5cdFx0aW5pdCgpO1xuXHR9XG5cbn07XG5kZXNjcmliZSgnZXhwcmVzc2VkJywgKCkgPT4ge1xuXG5cdGRlc2NyaWJlKCdiYXNpYyBoYW5kbGluZycsICgpID0+IHtcblx0XHRiZWZvcmVFYWNoKGluaXRBcHApO1xuXG5cdFx0aXQoJ3Nob3VsZCByZXR1cm4gc2ltcGxlIHZhbHVlcycsICgpID0+IHtcblx0XHRcdGFwcC5nZXQoJy8nLCAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiAnZm9vYmFyJztcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmVxdWVzdChhcHApXG5cdFx0XHRcdC5nZXQoJy8nKVxuXHRcdFx0XHQuZXhwZWN0KDIwMCk7XG5cdFx0fSk7XG5cblx0XHRpdCgnc2hvdWxkIHJldHVybiBzaW1wbGUgYXN5bmMgdmFsdWVzJywgKCkgPT4ge1xuXHRcdFx0YXBwLmdldCgnLycsICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIEIucmVzb2x2ZSh7XG5cdFx0XHRcdFx0bmFtZTogJ2Zvb2Jhcidcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiByZXF1ZXN0KGFwcClcblx0XHRcdFx0LmdldCgnLycpXG5cdFx0XHRcdC5leHBlY3QoMjAwKVxuXHRcdFx0XHQuZXhwZWN0KChyZXMpID0+IHtcblx0XHRcdFx0XHRhc3NlcnQuZXF1YWwocmVzLmJvZHkubmFtZSwgJ2Zvb2JhcicpO1xuXHRcdFx0XHR9KTtcblx0XHR9KTtcblxuXG5cdFx0aXQoJ3Bhc3NlcyBlcnJvcnMgdG8gZXJyb3IgaGFuZGxlcnMnLCAoKSA9PiB7XG5cdFx0XHRhcHAuZ2V0KCcvJywgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gQi5yZWplY3QobmV3IEVycm9yKCdvaCBub2VzJykpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGFwcC51c2UoKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHtcblx0XHRcdFx0cmVzLnN0YXR1cyg1MDApLnNlbmQoe21lc3NhZ2U6ICd0c2sgdHNrJ30pO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiByZXF1ZXN0KGFwcClcblx0XHRcdFx0LmdldCgnLycpXG5cdFx0XHRcdC5leHBlY3QoNTAwKVxuXHRcdFx0XHQuZXhwZWN0KChyZXMpID0+IHtcblx0XHRcdFx0XHRhc3NlcnQuZXF1YWwocmVzLmJvZHkubWVzc2FnZSwgJ3RzayB0c2snKTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fSk7XG5cblx0ZGVzY3JpYmUoJ2NvbXBsZXggaGFuZGxpbmcnLCAoKSA9PiB7XG5cdFx0YmVmb3JlRWFjaChpbml0QXBwKTtcblxuXHRcdGNvbnN0IHJldHVybnNSZWplY3RlZCA9ICgpID0+IHtcblx0XHRcdHJldHVybiBCLnJlamVjdChuZXcgRXJyb3IoJ0Zvb2JhcicpKTtcblx0XHR9O1xuXHRcdGNvbnN0IGVycm9ySGFuZGxlciA9IChhcHApID0+IHtcblx0XHRcdGFwcC51c2UoKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHtcblx0XHRcdFx0cmVzLnN0YXR1cyg1MDApLnNlbmQoe21lc3NhZ2U6ICdlcnInfSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0aXQoJ2FsbG93cyBtaWRkbGUgaGFuZGxlcnMnLCAoKSA9PiB7XG5cdFx0XHRhcHAuZ2V0KCcvJywgcmV0dXJuc1JlamVjdGVkLCAocmVxLCByZXMpID0+IHtcblx0XHRcdFx0cmV0dXJuICd5ZXAnO1xuXHRcdFx0fSk7XG5cdFx0XHRlcnJvckhhbmRsZXIoYXBwKTtcblx0XHRcdHJldHVybiByZXF1ZXN0KGFwcClcblx0XHRcdFx0LmdldCgnLycpXG5cdFx0XHRcdC5leHBlY3QoNTAwKTtcblx0XHR9KTtcblxuXHRcdGl0KCdhbGxvd3MgYXJyYXkgbWlkZGxlIGhhbmRsZXJzJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgZm4xID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cdFx0XHRcdHJlcy5mb28xID0gMTtcblx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IGZuMiA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xuXHRcdFx0XHRyZXMuZm9vMiA9IDI7XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH07XG5cblx0XHRcdGFwcC5nZXQoJy8nLCBbZm4xLCBmbjJdLCAocmVxLCByZXMpID0+IHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRmb28xOiByZXMuZm9vMSxcblx0XHRcdFx0XHRmb28yOiByZXMuZm9vMlxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0XHRlcnJvckhhbmRsZXIoYXBwKTtcblxuXHRcdFx0cmV0dXJuIHJlcXVlc3QoYXBwKVxuXHRcdFx0XHQuZ2V0KCcvJylcblx0XHRcdFx0LmV4cGVjdCgyMDApXG5cdFx0XHRcdC5leHBlY3QoKHJlcykgPT4ge1xuXHRcdFx0XHRcdGFzc2VydC5lcXVhbChyZXMuYm9keS5mb28yLCAyKTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
