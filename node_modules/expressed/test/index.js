'use strict';

/* jshint mocha: true */

const expressed = require('../lib');
const supertest = require('supertest');
const assert = require('assert');
const B = require('bluebird');
const Router = require('express/lib/router');
const query = require('express/lib/middleware/query');
const middleware = require('express/lib/middleware/init');

const request = (app) => {
	return supertest(app.internal);
};

// jscs:disable
var app;
var server;
// jscs:enable

// I want to clear all state between each test.
const initApp = (done) => {
	const init = () => {
		app = expressed();
		server = app.listen(9001);
		done();
	};

	if(server) {
		server.close(init);
	} else {
		init();
	}

};
describe('expressed', () => {

	describe('basic handling', () => {
		beforeEach(initApp);

		it('should return simple values', () => {
			app.get('/', () => {
				return 'foobar';
			});

			return request(app)
				.get('/')
				.expect(200);
		});

		it('should return simple async values', () => {
			app.get('/', () => {
				return B.resolve({
					name: 'foobar'
				});
			});
			return request(app)
				.get('/')
				.expect(200)
				.expect((res) => {
					assert.equal(res.body.name, 'foobar');
				});
		});


		it('passes errors to error handlers', () => {
			app.get('/', () => {
				return B.reject(new Error('oh noes'));
			});

			app.use((err, req, res, next) => {
				res.status(500).send({message: 'tsk tsk'});
			});

			return request(app)
				.get('/')
				.expect(500)
				.expect((res) => {
					assert.equal(res.body.message, 'tsk tsk');
				});
		});

	});

	describe('complex handling', () => {
		beforeEach(initApp);

		const returnsRejected = () => {
			return B.reject(new Error('Foobar'));
		};
		const errorHandler = (app) => {
			app.use((err, req, res, next) => {
				res.status(500).send({message: 'err'});
			});
		};

		it('allows middle handlers', () => {
			app.get('/', returnsRejected, (req, res) => {
				return 'yep';
			});
			errorHandler(app);
			return request(app)
				.get('/')
				.expect(500);
		});

		it('allows array middle handlers', () => {
			const fn1 = (req, res, next) => {
				res.foo1 = 1;
				next();
			};
			const fn2 = (req, res, next) => {
				res.foo2 = 2;
				next();
			};

			app.get('/', [fn1, fn2], (req, res) => {
				return {
					foo1: res.foo1,
					foo2: res.foo2
				};
			});
			errorHandler(app);

			return request(app)
				.get('/')
				.expect(200)
				.expect((res) => {
					assert.equal(res.body.foo2, 2);
				});
		});
	});
});
