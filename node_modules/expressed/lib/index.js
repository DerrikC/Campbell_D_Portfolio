'use strict';

var express = require('express');
var methods = require('methods').concat('all');

var isNil = function isNil(val) {
	return val === null || val === undefined;
};

var createHandleWrapper = function createHandleWrapper(handler) {
	// TODO: maybe handle express `use` method as well?
	return function (req, res, next) {
		// express already handles error throwing, so no need to wrap this in
		// another try/catch.
		var ret = handler(req, res, next);

		// In some cases, it makes sense to just call the send method manually,
		// for example to stream data.
		if (isNil(ret)) {
			return;
		}

		// We have a thenable.
		if (typeof ret.then === 'function') {
			ret.then(function (r) {
				if (!isNil(r)) {
					res.status(200).send(r);
				}
			}, next);
			return;
		}

		res.status(200).send(ret);
	};
};
// jscs:disable
var RouterWrapper = function RouterWrapper(internal) {
	this.internal = internal;
};
// jscs:enable

methods.forEach(function (method) {
	// No choice for this one...
	// jscs:disable
	RouterWrapper.prototype[method] = function () {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		// jscs:enable

		// Theres a couple of cases that this needs to handle. The first is the
		// basic syntax with the string at the begning. For some of the
		//var args = Array.prototype.slice.call(arguments);
		var isRg = typeof args[0] === 'string';
		var handlerList = isRg ? args.slice(1) : args;
		var head = isRg ? args[0] : null;
		//		if(typeof args[0] === 'string') {
		//			handlerList = args.slice(1);
		//			head = args[0];
		//		} else {
		//			handlerList = args;
		//		}

		// And then I need to process potential arrays...
		var handlers = handlerList.map(function (handler) {
			if (Array.isArray(handler)) {
				return handler.map(createHandleWrapper);
			}
			return createHandleWrapper(handler);
		});
		var passArgs = head ? [head].concat(handlers) : handlers;
		this.internal[method].apply(this.internal, passArgs);
	};
});

// jscs:disable
RouterWrapper.prototype.route = function () {
	// jscs:enable
	var router = this.internal.route.apply(this.internal, arguments);
	return new RouterWrapper(router);
};

// Remove wrapper instances before passing the arguments to the express
// instance.
// Hmm should this be recursive?
var unwrap = function unwrap(w) {
	var args = [];
	Array.prototype.forEach.call(w, function (arg) {
		if (arg instanceof RouterWrapper) {
			args.push(arg.internal);
		} else {
			args.push(arg);
		}
	});

	return args;
};

var routerWrapperKeys = Object.keys(RouterWrapper.prototype).concat('internal');

/**
 * Everything else just needs to be passed over to the express instance.
 */
var proxyExpress = function proxyExpress(wrapper) {
	Object.keys(wrapper.internal).filter(function (k) {
		return routerWrapperKeys.indexOf(k) === -1;
	}).forEach(function (k) {
		var orig = wrapper.internal[k];

		if (typeof orig === 'function') {
			// jscs:disable
			wrapper[k] = function () {
				// jscs:enable
				return this.internal[k].apply(this.internal, unwrap(arguments));
			};
		} else {
			Object.defineProperty(wrapper, k, {
				get: function get() {
					return wrapper.internal[k];
				}
			});
		}
	});
	return wrapper;
};

exports = module.exports = function () {
	var app = express();
	return proxyExpress(new RouterWrapper(app));
};

exports.Router = function (options) {
	var router = express.Router(options);
	return proxyExpress(new RouterWrapper(router));
};

Object.keys(express).filter(function (k) {
	return k !== 'Router';
}).forEach(function (k) {
	exports[k] = express[k];
});
//# sourceMappingURL=data:application/json;base64,
